// Code generated by sadayuki-matsuno bob-ex. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"io"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/im"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
	"github.com/stephenafamo/bob/types/pgtypes"
	"github.com/stephenafamo/scan"
)

// Post is an object representing the database table.
type Post struct {
	ID        int32               `db:"id,pk" `
	UserID    int32               `db:"user_id" `
	Title     string              `db:"title" `
	Content   null.Val[string]    `db:"content" `
	CreatedAt null.Val[time.Time] `db:"created_at" `
	UpdatedAt null.Val[time.Time] `db:"updated_at" `

	R postR `db:"-" `
}

// PostSlice is an alias for a slice of pointers to Post.
// This should almost always be used instead of []*Post.
type PostSlice []*Post

// Posts contains methods to work with the posts table
var Posts = psql.NewTablex[*Post, PostSlice, *PostSetter]("", "posts")

// PostsQuery is a query on the posts table
type PostsQuery = *psql.ViewQuery[*Post, PostSlice]

// postR is where relationships are stored.
type postR struct {
	Comments CommentSlice // comments.fk_comments_post
	PostTags PostTagSlice // post_tags.fk_post_tags_post
	User     *User        // posts.fk_posts_user
}

type postColumnNames struct {
	ID        string
	UserID    string
	Title     string
	Content   string
	CreatedAt string
	UpdatedAt string
}

var PostColumns = buildPostColumns("posts")

type postColumns struct {
	tableAlias string
	ID         psql.Expression
	UserID     psql.Expression
	Title      psql.Expression
	Content    psql.Expression
	CreatedAt  psql.Expression
	UpdatedAt  psql.Expression
}

func (c postColumns) Alias() string {
	return c.tableAlias
}

func (postColumns) AliasedAs(alias string) postColumns {
	return buildPostColumns(alias)
}

func buildPostColumns(alias string) postColumns {
	return postColumns{
		tableAlias: alias,
		ID:         psql.Quote(alias, "id"),
		UserID:     psql.Quote(alias, "user_id"),
		Title:      psql.Quote(alias, "title"),
		Content:    psql.Quote(alias, "content"),
		CreatedAt:  psql.Quote(alias, "created_at"),
		UpdatedAt:  psql.Quote(alias, "updated_at"),
	}
}

type postWhere[Q psql.Filterable] struct {
	ID        psql.WhereMod[Q, int32]
	UserID    psql.WhereMod[Q, int32]
	Title     psql.WhereMod[Q, string]
	Content   psql.WhereNullMod[Q, string]
	CreatedAt psql.WhereNullMod[Q, time.Time]
	UpdatedAt psql.WhereNullMod[Q, time.Time]
}

func (postWhere[Q]) AliasedAs(alias string) postWhere[Q] {
	return buildPostWhere[Q](buildPostColumns(alias))
}

func buildPostWhere[Q psql.Filterable](cols postColumns) postWhere[Q] {
	return postWhere[Q]{
		ID:        psql.Where[Q, int32](cols.ID),
		UserID:    psql.Where[Q, int32](cols.UserID),
		Title:     psql.Where[Q, string](cols.Title),
		Content:   psql.WhereNull[Q, string](cols.Content),
		CreatedAt: psql.WhereNull[Q, time.Time](cols.CreatedAt),
		UpdatedAt: psql.WhereNull[Q, time.Time](cols.UpdatedAt),
	}
}

var PostErrors = &postErrors{
	ErrUniquePostsPkey: &UniqueConstraintError{s: "posts_pkey"},
}

type postErrors struct {
	ErrUniquePostsPkey *UniqueConstraintError
}

// PostSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type PostSetter struct {
	ID        omit.Val[int32]         `db:"id,pk" `
	UserID    omit.Val[int32]         `db:"user_id" `
	Title     omit.Val[string]        `db:"title" `
	Content   omitnull.Val[string]    `db:"content" `
	CreatedAt omitnull.Val[time.Time] `db:"created_at" `
	UpdatedAt omitnull.Val[time.Time] `db:"updated_at" `
}

func (s PostSetter) SetColumns() []string {
	vals := make([]string, 0, 6)
	if !s.ID.IsUnset() {
		vals = append(vals, "id")
	}

	if !s.UserID.IsUnset() {
		vals = append(vals, "user_id")
	}

	if !s.Title.IsUnset() {
		vals = append(vals, "title")
	}

	if !s.Content.IsUnset() {
		vals = append(vals, "content")
	}

	if !s.CreatedAt.IsUnset() {
		vals = append(vals, "created_at")
	}

	if !s.UpdatedAt.IsUnset() {
		vals = append(vals, "updated_at")
	}

	return vals
}

func (s PostSetter) Overwrite(t *Post) {
	if !s.ID.IsUnset() {
		t.ID, _ = s.ID.Get()
	}
	if !s.UserID.IsUnset() {
		t.UserID, _ = s.UserID.Get()
	}
	if !s.Title.IsUnset() {
		t.Title, _ = s.Title.Get()
	}
	if !s.Content.IsUnset() {
		t.Content, _ = s.Content.GetNull()
	}
	if !s.CreatedAt.IsUnset() {
		t.CreatedAt, _ = s.CreatedAt.GetNull()
	}
	if !s.UpdatedAt.IsUnset() {
		t.UpdatedAt, _ = s.UpdatedAt.GetNull()
	}
}

func (s *PostSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return Posts.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 6)
		if s.ID.IsUnset() {
			vals[0] = psql.Raw("DEFAULT")
		} else {
			vals[0] = psql.Arg(s.ID)
		}

		if s.UserID.IsUnset() {
			vals[1] = psql.Raw("DEFAULT")
		} else {
			vals[1] = psql.Arg(s.UserID)
		}

		if s.Title.IsUnset() {
			vals[2] = psql.Raw("DEFAULT")
		} else {
			vals[2] = psql.Arg(s.Title)
		}

		if s.Content.IsUnset() {
			vals[3] = psql.Raw("DEFAULT")
		} else {
			vals[3] = psql.Arg(s.Content)
		}

		if s.CreatedAt.IsUnset() {
			vals[4] = psql.Raw("DEFAULT")
		} else {
			vals[4] = psql.Arg(s.CreatedAt)
		}

		if s.UpdatedAt.IsUnset() {
			vals[5] = psql.Raw("DEFAULT")
		} else {
			vals[5] = psql.Arg(s.UpdatedAt)
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s PostSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s PostSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 6)

	if !s.ID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "id")...),
			psql.Arg(s.ID),
		}})
	}

	if !s.UserID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "user_id")...),
			psql.Arg(s.UserID),
		}})
	}

	if !s.Title.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "title")...),
			psql.Arg(s.Title),
		}})
	}

	if !s.Content.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "content")...),
			psql.Arg(s.Content),
		}})
	}

	if !s.CreatedAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created_at")...),
			psql.Arg(s.CreatedAt),
		}})
	}

	if !s.UpdatedAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "updated_at")...),
			psql.Arg(s.UpdatedAt),
		}})
	}

	return exprs
}

// FindPost retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindPost(ctx context.Context, exec bob.Executor, IDPK int32, cols ...string) (*Post, error) {
	if len(cols) == 0 {
		return Posts.Query(
			SelectWhere.Posts.ID.EQ(IDPK),
		).One(ctx, exec)
	}

	return Posts.Query(
		SelectWhere.Posts.ID.EQ(IDPK),
		sm.Columns(Posts.Columns().Only(cols...)),
	).One(ctx, exec)
}

// PostExists checks the presence of a single record by primary key
func PostExists(ctx context.Context, exec bob.Executor, IDPK int32) (bool, error) {
	return Posts.Query(
		SelectWhere.Posts.ID.EQ(IDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after Post is retrieved from the database
func (o *Post) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Posts.AfterSelectHooks.RunHooks(ctx, exec, PostSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = Posts.AfterInsertHooks.RunHooks(ctx, exec, PostSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = Posts.AfterUpdateHooks.RunHooks(ctx, exec, PostSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = Posts.AfterDeleteHooks.RunHooks(ctx, exec, PostSlice{o})
	}

	return err
}

// PrimaryKeyVals returns the primary key values of the Post
func (o *Post) PrimaryKeyVals() bob.Expression {
	return psql.Arg(o.ID)
}

func (o *Post) pkEQ() dialect.Expression {
	return psql.Quote("posts", "id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.PrimaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the Post
func (o *Post) Update(ctx context.Context, exec bob.Executor, s *PostSetter) error {
	v, err := Posts.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single Post record with an executor
func (o *Post) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := Posts.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the Post using the executor
func (o *Post) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := Posts.Query(
		SelectWhere.Posts.ID.EQ(o.ID),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after PostSlice is retrieved from the database
func (o PostSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Posts.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = Posts.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = Posts.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = Posts.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o PostSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("posts", "id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.PrimaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o PostSlice) copyMatchingRows(from ...*Post) {
	for i, old := range o {
		for _, new := range from {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o PostSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Posts.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Post:
				o.copyMatchingRows(retrieved)
			case []*Post:
				o.copyMatchingRows(retrieved...)
			case PostSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Post or a slice of Post
				// then run the AfterUpdateHooks on the slice
				_, err = Posts.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o PostSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Posts.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Post:
				o.copyMatchingRows(retrieved)
			case []*Post:
				o.copyMatchingRows(retrieved...)
			case PostSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Post or a slice of Post
				// then run the AfterDeleteHooks on the slice
				_, err = Posts.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o PostSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals PostSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Posts.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o PostSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Posts.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o PostSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := Posts.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type postJoins[Q dialect.Joinable] struct {
	typ      string
	Comments func(context.Context) modAs[Q, commentColumns]
	PostTags func(context.Context) modAs[Q, postTagColumns]
	User     func(context.Context) modAs[Q, userColumns]
}

func (j postJoins[Q]) aliasedAs(alias string) postJoins[Q] {
	return buildPostJoins[Q](buildPostColumns(alias), j.typ)
}

func buildPostJoins[Q dialect.Joinable](cols postColumns, typ string) postJoins[Q] {
	return postJoins[Q]{
		typ:      typ,
		Comments: postsJoinComments[Q](cols, typ),
		PostTags: postsJoinPostTags[Q](cols, typ),
		User:     postsJoinUser[Q](cols, typ),
	}
}

func postsJoinComments[Q dialect.Joinable](from postColumns, typ string) func(context.Context) modAs[Q, commentColumns] {
	return func(ctx context.Context) modAs[Q, commentColumns] {
		return modAs[Q, commentColumns]{
			c: CommentColumns,
			f: func(to commentColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Comments.Name().As(to.Alias())).On(
						to.PostID.EQ(from.ID),
					))
				}

				return mods
			},
		}
	}
}

func postsJoinPostTags[Q dialect.Joinable](from postColumns, typ string) func(context.Context) modAs[Q, postTagColumns] {
	return func(ctx context.Context) modAs[Q, postTagColumns] {
		return modAs[Q, postTagColumns]{
			c: PostTagColumns,
			f: func(to postTagColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, PostTags.Name().As(to.Alias())).On(
						to.PostID.EQ(from.ID),
					))
				}

				return mods
			},
		}
	}
}

func postsJoinUser[Q dialect.Joinable](from postColumns, typ string) func(context.Context) modAs[Q, userColumns] {
	return func(ctx context.Context) modAs[Q, userColumns] {
		return modAs[Q, userColumns]{
			c: UserColumns,
			f: func(to userColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Users.Name().As(to.Alias())).On(
						to.ID.EQ(from.UserID),
					))
				}

				return mods
			},
		}
	}
}

// Comments starts a query for related objects on comments
func (o *Post) Comments(mods ...bob.Mod[*dialect.SelectQuery]) CommentsQuery {
	return Comments.Query(append(mods,
		sm.Where(CommentColumns.PostID.EQ(psql.Arg(o.ID))),
	)...)
}

func (os PostSlice) Comments(mods ...bob.Mod[*dialect.SelectQuery]) CommentsQuery {
	pkID := make(pgtypes.Array[int32], len(os))
	for i, o := range os {
		pkID[i] = o.ID
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkID), "integer[]")),
	))

	return Comments.Query(append(mods,
		sm.Where(psql.Group(CommentColumns.PostID).In(PKArgExpr)),
	)...)
}

// PostTags starts a query for related objects on post_tags
func (o *Post) PostTags(mods ...bob.Mod[*dialect.SelectQuery]) PostTagsQuery {
	return PostTags.Query(append(mods,
		sm.Where(PostTagColumns.PostID.EQ(psql.Arg(o.ID))),
	)...)
}

func (os PostSlice) PostTags(mods ...bob.Mod[*dialect.SelectQuery]) PostTagsQuery {
	pkID := make(pgtypes.Array[int32], len(os))
	for i, o := range os {
		pkID[i] = o.ID
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkID), "integer[]")),
	))

	return PostTags.Query(append(mods,
		sm.Where(psql.Group(PostTagColumns.PostID).In(PKArgExpr)),
	)...)
}

// User starts a query for related objects on users
func (o *Post) User(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	return Users.Query(append(mods,
		sm.Where(UserColumns.ID.EQ(psql.Arg(o.UserID))),
	)...)
}

func (os PostSlice) User(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	pkUserID := make(pgtypes.Array[int32], len(os))
	for i, o := range os {
		pkUserID[i] = o.UserID
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkUserID), "integer[]")),
	))

	return Users.Query(append(mods,
		sm.Where(psql.Group(UserColumns.ID).In(PKArgExpr)),
	)...)
}

func (o *Post) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "Comments":
		rels, ok := retrieved.(CommentSlice)
		if !ok {
			return fmt.Errorf("post cannot load %T as %q", retrieved, name)
		}

		o.R.Comments = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.Post = o
			}
		}
		return nil
	case "PostTags":
		rels, ok := retrieved.(PostTagSlice)
		if !ok {
			return fmt.Errorf("post cannot load %T as %q", retrieved, name)
		}

		o.R.PostTags = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.Post = o
			}
		}
		return nil
	case "User":
		rel, ok := retrieved.(*User)
		if !ok {
			return fmt.Errorf("post cannot load %T as %q", retrieved, name)
		}

		o.R.User = rel

		if rel != nil {
			rel.R.Posts = PostSlice{o}
		}
		return nil
	default:
		return fmt.Errorf("post has no relationship %q", name)
	}
}

func ThenLoadPostComments(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadPostComments(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load PostComments", retrieved)
		}

		err := loader.LoadPostComments(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadPostComments loads the post's Comments into the .R struct
func (o *Post) LoadPostComments(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Comments = nil

	related, err := o.Comments(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.Post = o
	}

	o.R.Comments = related
	return nil
}

// LoadPostComments loads the post's Comments into the .R struct
func (os PostSlice) LoadPostComments(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	comments, err := os.Comments(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		o.R.Comments = nil
	}

	for _, o := range os {
		for _, rel := range comments {
			if o.ID != rel.PostID {
				continue
			}

			rel.R.Post = o

			o.R.Comments = append(o.R.Comments, rel)
		}
	}

	return nil
}

func ThenLoadPostPostTags(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadPostPostTags(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load PostPostTags", retrieved)
		}

		err := loader.LoadPostPostTags(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadPostPostTags loads the post's PostTags into the .R struct
func (o *Post) LoadPostPostTags(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.PostTags = nil

	related, err := o.PostTags(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.Post = o
	}

	o.R.PostTags = related
	return nil
}

// LoadPostPostTags loads the post's PostTags into the .R struct
func (os PostSlice) LoadPostPostTags(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	postTags, err := os.PostTags(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		o.R.PostTags = nil
	}

	for _, o := range os {
		for _, rel := range postTags {
			if o.ID != rel.PostID {
				continue
			}

			rel.R.Post = o

			o.R.PostTags = append(o.R.PostTags, rel)
		}
	}

	return nil
}

func PreloadPostUser(opts ...psql.PreloadOption) psql.Preloader {
	return psql.Preload[*User, UserSlice](orm.Relationship{
		Name: "User",
		Sides: []orm.RelSide{
			{
				From: TableNames.Posts,
				To:   TableNames.Users,
				FromColumns: []string{
					ColumnNames.Posts.UserID,
				},
				ToColumns: []string{
					ColumnNames.Users.ID,
				},
			},
		},
	}, Users.Columns().Names(), opts...)
}

func ThenLoadPostUser(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadPostUser(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load PostUser", retrieved)
		}

		err := loader.LoadPostUser(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadPostUser loads the post's User into the .R struct
func (o *Post) LoadPostUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.User = nil

	related, err := o.User(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.Posts = PostSlice{o}

	o.R.User = related
	return nil
}

// LoadPostUser loads the post's User into the .R struct
func (os PostSlice) LoadPostUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	users, err := os.User(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range users {
			if o.UserID != rel.ID {
				continue
			}

			rel.R.Posts = append(rel.R.Posts, o)

			o.R.User = rel
			break
		}
	}

	return nil
}

func insertPostComments0(ctx context.Context, exec bob.Executor, comments1 []*CommentSetter, post0 *Post) (CommentSlice, error) {
	for i := range comments1 {
		comments1[i].PostID = omit.From(post0.ID)
	}

	ret, err := Comments.Insert(bob.ToMods(comments1...)).All(ctx, exec)
	if err != nil {
		return ret, fmt.Errorf("insertPostComments0: %w", err)
	}

	return ret, nil
}

func attachPostComments0(ctx context.Context, exec bob.Executor, count int, comments1 CommentSlice, post0 *Post) (CommentSlice, error) {
	setter := &CommentSetter{
		PostID: omit.From(post0.ID),
	}

	err := comments1.UpdateAll(ctx, exec, *setter)
	if err != nil {
		return nil, fmt.Errorf("attachPostComments0: %w", err)
	}

	return comments1, nil
}

func (post0 *Post) InsertComments(ctx context.Context, exec bob.Executor, related ...*CommentSetter) error {
	if len(related) == 0 {
		return nil
	}

	var err error

	comments1, err := insertPostComments0(ctx, exec, related, post0)
	if err != nil {
		return err
	}

	post0.R.Comments = append(post0.R.Comments, comments1...)

	for _, rel := range comments1 {
		rel.R.Post = post0
	}
	return nil
}

func (post0 *Post) AttachComments(ctx context.Context, exec bob.Executor, related ...*Comment) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	comments1 := CommentSlice(related)

	_, err = attachPostComments0(ctx, exec, len(related), comments1, post0)
	if err != nil {
		return err
	}

	post0.R.Comments = append(post0.R.Comments, comments1...)

	for _, rel := range related {
		rel.R.Post = post0
	}

	return nil
}

func insertPostPostTags0(ctx context.Context, exec bob.Executor, postTags1 []*PostTagSetter, post0 *Post) (PostTagSlice, error) {
	for i := range postTags1 {
		postTags1[i].PostID = omit.From(post0.ID)
	}

	ret, err := PostTags.Insert(bob.ToMods(postTags1...)).All(ctx, exec)
	if err != nil {
		return ret, fmt.Errorf("insertPostPostTags0: %w", err)
	}

	return ret, nil
}

func attachPostPostTags0(ctx context.Context, exec bob.Executor, count int, postTags1 PostTagSlice, post0 *Post) (PostTagSlice, error) {
	setter := &PostTagSetter{
		PostID: omit.From(post0.ID),
	}

	err := postTags1.UpdateAll(ctx, exec, *setter)
	if err != nil {
		return nil, fmt.Errorf("attachPostPostTags0: %w", err)
	}

	return postTags1, nil
}

func (post0 *Post) InsertPostTags(ctx context.Context, exec bob.Executor, related ...*PostTagSetter) error {
	if len(related) == 0 {
		return nil
	}

	var err error

	postTags1, err := insertPostPostTags0(ctx, exec, related, post0)
	if err != nil {
		return err
	}

	post0.R.PostTags = append(post0.R.PostTags, postTags1...)

	for _, rel := range postTags1 {
		rel.R.Post = post0
	}
	return nil
}

func (post0 *Post) AttachPostTags(ctx context.Context, exec bob.Executor, related ...*PostTag) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	postTags1 := PostTagSlice(related)

	_, err = attachPostPostTags0(ctx, exec, len(related), postTags1, post0)
	if err != nil {
		return err
	}

	post0.R.PostTags = append(post0.R.PostTags, postTags1...)

	for _, rel := range related {
		rel.R.Post = post0
	}

	return nil
}

func attachPostUser0(ctx context.Context, exec bob.Executor, count int, post0 *Post, user1 *User) (*Post, error) {
	setter := &PostSetter{
		UserID: omit.From(user1.ID),
	}

	err := post0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachPostUser0: %w", err)
	}

	return post0, nil
}

func (post0 *Post) InsertUser(ctx context.Context, exec bob.Executor, related *UserSetter) error {
	user1, err := Users.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachPostUser0(ctx, exec, 1, post0, user1)
	if err != nil {
		return err
	}

	post0.R.User = user1

	user1.R.Posts = append(user1.R.Posts, post0)

	return nil
}

func (post0 *Post) AttachUser(ctx context.Context, exec bob.Executor, user1 *User) error {
	var err error

	_, err = attachPostUser0(ctx, exec, 1, post0, user1)
	if err != nil {
		return err
	}

	post0.R.User = user1

	user1.R.Posts = append(user1.R.Posts, post0)

	return nil
}

// UpsertByPK uses an executor to upsert the Post
func (o *Post) UpsertByPK(ctx context.Context, exec bob.Executor, s *PostSetter) error {
	columns := s.SetColumns()
	if len(columns) == 0 {
		return nil
	}

	conflictCols := []any{
		"id",
	}

	q := psql.Insert(
		im.Into("posts"),
		im.OnConflict(conflictCols...).
			DoUpdate(im.SetExcluded(columns...)),
		im.Returning("id", "user_id", "title", "content", "created_at", "updated_at"),
	)

	q.Apply(s)
	ret, err := bob.One(ctx, exec, q, scan.StructMapper[Post]())
	if err != nil {
		return err
	}
	*o = ret

	return nil
}

// UpsertDoNothing uses an executor to upsert the Post
func (o *Post) UpsertDoNothing(ctx context.Context, exec bob.Executor, s *PostSetter) error {
	conflictCols := []any{
		"id",
	}

	q := psql.Insert(
		im.Into("posts"),
		im.Returning("id", "user_id", "title", "content", "created_at", "updated_at"),
		im.OnConflict(conflictCols...).DoNothing(),
	)

	q.Apply(s)
	ret, err := bob.One(ctx, exec, q, scan.StructMapper[Post]())
	if err != nil {
		return err
	}
	*o = ret

	return nil
}
