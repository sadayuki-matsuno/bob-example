// Code generated by sadayuki-matsuno bob-ex. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"io"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/im"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/scan"
)

// Tag is an object representing the database table.
type Tag struct {
	ID        int32               `db:"id,pk" `
	Name      string              `db:"name" `
	CreatedAt null.Val[time.Time] `db:"created_at" `
	UpdatedAt null.Val[time.Time] `db:"updated_at" `

	R tagR `db:"-" `
}

// TagSlice is an alias for a slice of pointers to Tag.
// This should almost always be used instead of []*Tag.
type TagSlice []*Tag

// Tags contains methods to work with the tags table
var Tags = psql.NewTablex[*Tag, TagSlice, *TagSetter]("", "tags")

// TagsQuery is a query on the tags table
type TagsQuery = *psql.ViewQuery[*Tag, TagSlice]

// tagR is where relationships are stored.
type tagR struct {
	PostTags PostTagSlice // post_tags.fk_post_tags_tag
}

type tagColumnNames struct {
	ID        string
	Name      string
	CreatedAt string
	UpdatedAt string
}

var TagColumns = buildTagColumns("tags")

type tagColumns struct {
	tableAlias string
	ID         psql.Expression
	Name       psql.Expression
	CreatedAt  psql.Expression
	UpdatedAt  psql.Expression
}

func (c tagColumns) Alias() string {
	return c.tableAlias
}

func (tagColumns) AliasedAs(alias string) tagColumns {
	return buildTagColumns(alias)
}

func buildTagColumns(alias string) tagColumns {
	return tagColumns{
		tableAlias: alias,
		ID:         psql.Quote(alias, "id"),
		Name:       psql.Quote(alias, "name"),
		CreatedAt:  psql.Quote(alias, "created_at"),
		UpdatedAt:  psql.Quote(alias, "updated_at"),
	}
}

type tagWhere[Q psql.Filterable] struct {
	ID        psql.WhereMod[Q, int32]
	Name      psql.WhereMod[Q, string]
	CreatedAt psql.WhereNullMod[Q, time.Time]
	UpdatedAt psql.WhereNullMod[Q, time.Time]
}

func (tagWhere[Q]) AliasedAs(alias string) tagWhere[Q] {
	return buildTagWhere[Q](buildTagColumns(alias))
}

func buildTagWhere[Q psql.Filterable](cols tagColumns) tagWhere[Q] {
	return tagWhere[Q]{
		ID:        psql.Where[Q, int32](cols.ID),
		Name:      psql.Where[Q, string](cols.Name),
		CreatedAt: psql.WhereNull[Q, time.Time](cols.CreatedAt),
		UpdatedAt: psql.WhereNull[Q, time.Time](cols.UpdatedAt),
	}
}

var TagErrors = &tagErrors{
	ErrUniqueTagsPkey: &UniqueConstraintError{s: "tags_pkey"},

	ErrUniqueTagsNameKey: &UniqueConstraintError{s: "tags_name_key"},
}

type tagErrors struct {
	ErrUniqueTagsPkey *UniqueConstraintError

	ErrUniqueTagsNameKey *UniqueConstraintError
}

// TagSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type TagSetter struct {
	ID        omit.Val[int32]         `db:"id,pk" `
	Name      omit.Val[string]        `db:"name" `
	CreatedAt omitnull.Val[time.Time] `db:"created_at" `
	UpdatedAt omitnull.Val[time.Time] `db:"updated_at" `
}

func (s TagSetter) SetColumns() []string {
	vals := make([]string, 0, 4)
	if !s.ID.IsUnset() {
		vals = append(vals, "id")
	}

	if !s.Name.IsUnset() {
		vals = append(vals, "name")
	}

	if !s.CreatedAt.IsUnset() {
		vals = append(vals, "created_at")
	}

	if !s.UpdatedAt.IsUnset() {
		vals = append(vals, "updated_at")
	}

	return vals
}

func (s TagSetter) Overwrite(t *Tag) {
	if !s.ID.IsUnset() {
		t.ID, _ = s.ID.Get()
	}
	if !s.Name.IsUnset() {
		t.Name, _ = s.Name.Get()
	}
	if !s.CreatedAt.IsUnset() {
		t.CreatedAt, _ = s.CreatedAt.GetNull()
	}
	if !s.UpdatedAt.IsUnset() {
		t.UpdatedAt, _ = s.UpdatedAt.GetNull()
	}
}

func (s *TagSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return Tags.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 4)
		if s.ID.IsUnset() {
			vals[0] = psql.Raw("DEFAULT")
		} else {
			vals[0] = psql.Arg(s.ID)
		}

		if s.Name.IsUnset() {
			vals[1] = psql.Raw("DEFAULT")
		} else {
			vals[1] = psql.Arg(s.Name)
		}

		if s.CreatedAt.IsUnset() {
			vals[2] = psql.Raw("DEFAULT")
		} else {
			vals[2] = psql.Arg(s.CreatedAt)
		}

		if s.UpdatedAt.IsUnset() {
			vals[3] = psql.Raw("DEFAULT")
		} else {
			vals[3] = psql.Arg(s.UpdatedAt)
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s TagSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s TagSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 4)

	if !s.ID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "id")...),
			psql.Arg(s.ID),
		}})
	}

	if !s.Name.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "name")...),
			psql.Arg(s.Name),
		}})
	}

	if !s.CreatedAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created_at")...),
			psql.Arg(s.CreatedAt),
		}})
	}

	if !s.UpdatedAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "updated_at")...),
			psql.Arg(s.UpdatedAt),
		}})
	}

	return exprs
}

// FindTag retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindTag(ctx context.Context, exec bob.Executor, IDPK int32, cols ...string) (*Tag, error) {
	if len(cols) == 0 {
		return Tags.Query(
			SelectWhere.Tags.ID.EQ(IDPK),
		).One(ctx, exec)
	}

	return Tags.Query(
		SelectWhere.Tags.ID.EQ(IDPK),
		sm.Columns(Tags.Columns().Only(cols...)),
	).One(ctx, exec)
}

// TagExists checks the presence of a single record by primary key
func TagExists(ctx context.Context, exec bob.Executor, IDPK int32) (bool, error) {
	return Tags.Query(
		SelectWhere.Tags.ID.EQ(IDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after Tag is retrieved from the database
func (o *Tag) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Tags.AfterSelectHooks.RunHooks(ctx, exec, TagSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = Tags.AfterInsertHooks.RunHooks(ctx, exec, TagSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = Tags.AfterUpdateHooks.RunHooks(ctx, exec, TagSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = Tags.AfterDeleteHooks.RunHooks(ctx, exec, TagSlice{o})
	}

	return err
}

// PrimaryKeyVals returns the primary key values of the Tag
func (o *Tag) PrimaryKeyVals() bob.Expression {
	return psql.Arg(o.ID)
}

func (o *Tag) pkEQ() dialect.Expression {
	return psql.Quote("tags", "id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.PrimaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the Tag
func (o *Tag) Update(ctx context.Context, exec bob.Executor, s *TagSetter) error {
	v, err := Tags.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single Tag record with an executor
func (o *Tag) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := Tags.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the Tag using the executor
func (o *Tag) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := Tags.Query(
		SelectWhere.Tags.ID.EQ(o.ID),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after TagSlice is retrieved from the database
func (o TagSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Tags.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = Tags.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = Tags.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = Tags.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o TagSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("tags", "id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.PrimaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o TagSlice) copyMatchingRows(from ...*Tag) {
	for i, old := range o {
		for _, new := range from {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o TagSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Tags.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Tag:
				o.copyMatchingRows(retrieved)
			case []*Tag:
				o.copyMatchingRows(retrieved...)
			case TagSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Tag or a slice of Tag
				// then run the AfterUpdateHooks on the slice
				_, err = Tags.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o TagSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Tags.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Tag:
				o.copyMatchingRows(retrieved)
			case []*Tag:
				o.copyMatchingRows(retrieved...)
			case TagSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Tag or a slice of Tag
				// then run the AfterDeleteHooks on the slice
				_, err = Tags.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o TagSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals TagSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Tags.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o TagSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Tags.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o TagSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := Tags.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type tagJoins[Q dialect.Joinable] struct {
	typ      string
	PostTags func(context.Context) modAs[Q, postTagColumns]
}

func (j tagJoins[Q]) aliasedAs(alias string) tagJoins[Q] {
	return buildTagJoins[Q](buildTagColumns(alias), j.typ)
}

func buildTagJoins[Q dialect.Joinable](cols tagColumns, typ string) tagJoins[Q] {
	return tagJoins[Q]{
		typ:      typ,
		PostTags: tagsJoinPostTags[Q](cols, typ),
	}
}

func tagsJoinPostTags[Q dialect.Joinable](from tagColumns, typ string) func(context.Context) modAs[Q, postTagColumns] {
	return func(ctx context.Context) modAs[Q, postTagColumns] {
		return modAs[Q, postTagColumns]{
			c: PostTagColumns,
			f: func(to postTagColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, PostTags.Name().As(to.Alias())).On(
						to.TagID.EQ(from.ID),
					))
				}

				return mods
			},
		}
	}
}

// PostTags starts a query for related objects on post_tags
func (o *Tag) PostTags(mods ...bob.Mod[*dialect.SelectQuery]) PostTagsQuery {
	return PostTags.Query(append(mods,
		sm.Where(PostTagColumns.TagID.EQ(psql.Arg(o.ID))),
	)...)
}

func (os TagSlice) PostTags(mods ...bob.Mod[*dialect.SelectQuery]) PostTagsQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.ID)
	}

	return PostTags.Query(append(mods,
		sm.Where(psql.Group(PostTagColumns.TagID).In(PKArgs...)),
	)...)
}

func (o *Tag) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "PostTags":
		rels, ok := retrieved.(PostTagSlice)
		if !ok {
			return fmt.Errorf("tag cannot load %T as %q", retrieved, name)
		}

		o.R.PostTags = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.Tag = o
			}
		}
		return nil
	default:
		return fmt.Errorf("tag has no relationship %q", name)
	}
}

func ThenLoadTagPostTags(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadTagPostTags(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load TagPostTags", retrieved)
		}

		err := loader.LoadTagPostTags(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadTagPostTags loads the tag's PostTags into the .R struct
func (o *Tag) LoadTagPostTags(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.PostTags = nil

	related, err := o.PostTags(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.Tag = o
	}

	o.R.PostTags = related
	return nil
}

// LoadTagPostTags loads the tag's PostTags into the .R struct
func (os TagSlice) LoadTagPostTags(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	postTags, err := os.PostTags(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		o.R.PostTags = nil
	}

	for _, o := range os {
		for _, rel := range postTags {
			if o.ID != rel.TagID {
				continue
			}

			rel.R.Tag = o

			o.R.PostTags = append(o.R.PostTags, rel)
		}
	}

	return nil
}

func insertTagPostTags0(ctx context.Context, exec bob.Executor, postTags1 []*PostTagSetter, tag0 *Tag) (PostTagSlice, error) {
	for i := range postTags1 {
		postTags1[i].TagID = omit.From(tag0.ID)
	}

	ret, err := PostTags.Insert(bob.ToMods(postTags1...)).All(ctx, exec)
	if err != nil {
		return ret, fmt.Errorf("insertTagPostTags0: %w", err)
	}

	return ret, nil
}

func attachTagPostTags0(ctx context.Context, exec bob.Executor, count int, postTags1 PostTagSlice, tag0 *Tag) (PostTagSlice, error) {
	setter := &PostTagSetter{
		TagID: omit.From(tag0.ID),
	}

	err := postTags1.UpdateAll(ctx, exec, *setter)
	if err != nil {
		return nil, fmt.Errorf("attachTagPostTags0: %w", err)
	}

	return postTags1, nil
}

func (tag0 *Tag) InsertPostTags(ctx context.Context, exec bob.Executor, related ...*PostTagSetter) error {
	if len(related) == 0 {
		return nil
	}

	var err error

	postTags1, err := insertTagPostTags0(ctx, exec, related, tag0)
	if err != nil {
		return err
	}

	tag0.R.PostTags = append(tag0.R.PostTags, postTags1...)

	for _, rel := range postTags1 {
		rel.R.Tag = tag0
	}
	return nil
}

func (tag0 *Tag) AttachPostTags(ctx context.Context, exec bob.Executor, related ...*PostTag) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	postTags1 := PostTagSlice(related)

	_, err = attachTagPostTags0(ctx, exec, len(related), postTags1, tag0)
	if err != nil {
		return err
	}

	tag0.R.PostTags = append(tag0.R.PostTags, postTags1...)

	for _, rel := range related {
		rel.R.Tag = tag0
	}

	return nil
}

// UpsertByPK uses an executor to upsert the Tag
func (o *Tag) UpsertByPK(ctx context.Context, exec bob.Executor, s *TagSetter) error {
	columns := s.SetColumns()
	if len(columns) == 0 {
		return nil
	}

	conflictCols := []any{
		"id",
	}

	q := psql.Insert(
		im.Into("tags"),
		im.OnConflict(conflictCols...).
			DoUpdate(im.SetExcluded(columns...)),
		im.Returning("id", "name", "created_at", "updated_at"),
	)

	q.Apply(s)
	ret, err := bob.One(ctx, exec, q, scan.StructMapper[Tag]())
	if err != nil {
		return err
	}
	*o = ret

	return nil
}

// UpsertDoNothing uses an executor to upsert the Tag
func (o *Tag) UpsertDoNothing(ctx context.Context, exec bob.Executor, s *TagSetter) error {
	conflictCols := []any{
		"id",
	}

	q := psql.Insert(
		im.Into("tags"),
		im.Returning("id", "name", "created_at", "updated_at"),
		im.OnConflict(conflictCols...).DoNothing(),
	)

	q.Apply(s)
	ret, err := bob.One(ctx, exec, q, scan.StructMapper[Tag]())
	if err != nil {
		return err
	}
	*o = ret

	return nil
}

// UpsertByTagsNameKey  uses an executor to upsert the tags_name_key
// ["name",]
func (o *Tag) UpsertByTagsNameKey(ctx context.Context, exec bob.Executor, s *TagSetter) error {
	columns := s.SetColumns()
	if len(columns) == 0 {
		return nil
	}

	conflictCols := []any{
		"name",
	}

	q := psql.Insert(
		im.Into("tags"),
		im.OnConflict(conflictCols...).
			DoUpdate(im.SetExcluded(columns...)),
		im.Returning("id", "name", "created_at", "updated_at"),
	)

	q.Apply(s)
	ret, err := bob.One(ctx, exec, q, scan.StructMapper[Tag]())
	if err != nil {
		return err
	}
	*o = ret

	return nil
}
