// Code generated by sadayuki-matsuno bob-ex. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"io"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/im"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
	"github.com/stephenafamo/scan"
)

// PostTag is an object representing the database table.
type PostTag struct {
	PostID    int32               `db:"post_id,pk" `
	TagID     int32               `db:"tag_id,pk" `
	CreatedAt null.Val[time.Time] `db:"created_at" `
	UpdatedAt null.Val[time.Time] `db:"updated_at" `

	R postTagR `db:"-" `
}

// PostTagSlice is an alias for a slice of pointers to PostTag.
// This should almost always be used instead of []*PostTag.
type PostTagSlice []*PostTag

// PostTags contains methods to work with the post_tags table
var PostTags = psql.NewTablex[*PostTag, PostTagSlice, *PostTagSetter]("", "post_tags")

// PostTagsQuery is a query on the post_tags table
type PostTagsQuery = *psql.ViewQuery[*PostTag, PostTagSlice]

// postTagR is where relationships are stored.
type postTagR struct {
	Post *Post // post_tags.fk_post_tags_post
	Tag  *Tag  // post_tags.fk_post_tags_tag
}

type postTagColumnNames struct {
	PostID    string
	TagID     string
	CreatedAt string
	UpdatedAt string
}

var PostTagColumns = buildPostTagColumns("post_tags")

type postTagColumns struct {
	tableAlias string
	PostID     psql.Expression
	TagID      psql.Expression
	CreatedAt  psql.Expression
	UpdatedAt  psql.Expression
}

func (c postTagColumns) Alias() string {
	return c.tableAlias
}

func (postTagColumns) AliasedAs(alias string) postTagColumns {
	return buildPostTagColumns(alias)
}

func buildPostTagColumns(alias string) postTagColumns {
	return postTagColumns{
		tableAlias: alias,
		PostID:     psql.Quote(alias, "post_id"),
		TagID:      psql.Quote(alias, "tag_id"),
		CreatedAt:  psql.Quote(alias, "created_at"),
		UpdatedAt:  psql.Quote(alias, "updated_at"),
	}
}

type postTagWhere[Q psql.Filterable] struct {
	PostID    psql.WhereMod[Q, int32]
	TagID     psql.WhereMod[Q, int32]
	CreatedAt psql.WhereNullMod[Q, time.Time]
	UpdatedAt psql.WhereNullMod[Q, time.Time]
}

func (postTagWhere[Q]) AliasedAs(alias string) postTagWhere[Q] {
	return buildPostTagWhere[Q](buildPostTagColumns(alias))
}

func buildPostTagWhere[Q psql.Filterable](cols postTagColumns) postTagWhere[Q] {
	return postTagWhere[Q]{
		PostID:    psql.Where[Q, int32](cols.PostID),
		TagID:     psql.Where[Q, int32](cols.TagID),
		CreatedAt: psql.WhereNull[Q, time.Time](cols.CreatedAt),
		UpdatedAt: psql.WhereNull[Q, time.Time](cols.UpdatedAt),
	}
}

var PostTagErrors = &postTagErrors{
	ErrUniquePostTagsPkey: &UniqueConstraintError{s: "post_tags_pkey"},
}

type postTagErrors struct {
	ErrUniquePostTagsPkey *UniqueConstraintError
}

// PostTagSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type PostTagSetter struct {
	PostID    omit.Val[int32]         `db:"post_id,pk" `
	TagID     omit.Val[int32]         `db:"tag_id,pk" `
	CreatedAt omitnull.Val[time.Time] `db:"created_at" `
	UpdatedAt omitnull.Val[time.Time] `db:"updated_at" `
}

func (s PostTagSetter) SetColumns() []string {
	vals := make([]string, 0, 4)
	if !s.PostID.IsUnset() {
		vals = append(vals, "post_id")
	}

	if !s.TagID.IsUnset() {
		vals = append(vals, "tag_id")
	}

	if !s.CreatedAt.IsUnset() {
		vals = append(vals, "created_at")
	}

	if !s.UpdatedAt.IsUnset() {
		vals = append(vals, "updated_at")
	}

	return vals
}

func (s PostTagSetter) Overwrite(t *PostTag) {
	if !s.PostID.IsUnset() {
		t.PostID, _ = s.PostID.Get()
	}
	if !s.TagID.IsUnset() {
		t.TagID, _ = s.TagID.Get()
	}
	if !s.CreatedAt.IsUnset() {
		t.CreatedAt, _ = s.CreatedAt.GetNull()
	}
	if !s.UpdatedAt.IsUnset() {
		t.UpdatedAt, _ = s.UpdatedAt.GetNull()
	}
}

func (s *PostTagSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return PostTags.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 4)
		if s.PostID.IsUnset() {
			vals[0] = psql.Raw("DEFAULT")
		} else {
			vals[0] = psql.Arg(s.PostID)
		}

		if s.TagID.IsUnset() {
			vals[1] = psql.Raw("DEFAULT")
		} else {
			vals[1] = psql.Arg(s.TagID)
		}

		if s.CreatedAt.IsUnset() {
			vals[2] = psql.Raw("DEFAULT")
		} else {
			vals[2] = psql.Arg(s.CreatedAt)
		}

		if s.UpdatedAt.IsUnset() {
			vals[3] = psql.Raw("DEFAULT")
		} else {
			vals[3] = psql.Arg(s.UpdatedAt)
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s PostTagSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s PostTagSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 4)

	if !s.PostID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "post_id")...),
			psql.Arg(s.PostID),
		}})
	}

	if !s.TagID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "tag_id")...),
			psql.Arg(s.TagID),
		}})
	}

	if !s.CreatedAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created_at")...),
			psql.Arg(s.CreatedAt),
		}})
	}

	if !s.UpdatedAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "updated_at")...),
			psql.Arg(s.UpdatedAt),
		}})
	}

	return exprs
}

// FindPostTag retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindPostTag(ctx context.Context, exec bob.Executor, PostIDPK int32, TagIDPK int32, cols ...string) (*PostTag, error) {
	if len(cols) == 0 {
		return PostTags.Query(
			SelectWhere.PostTags.PostID.EQ(PostIDPK),
			SelectWhere.PostTags.TagID.EQ(TagIDPK),
		).One(ctx, exec)
	}

	return PostTags.Query(
		SelectWhere.PostTags.PostID.EQ(PostIDPK),
		SelectWhere.PostTags.TagID.EQ(TagIDPK),
		sm.Columns(PostTags.Columns().Only(cols...)),
	).One(ctx, exec)
}

// PostTagExists checks the presence of a single record by primary key
func PostTagExists(ctx context.Context, exec bob.Executor, PostIDPK int32, TagIDPK int32) (bool, error) {
	return PostTags.Query(
		SelectWhere.PostTags.PostID.EQ(PostIDPK),
		SelectWhere.PostTags.TagID.EQ(TagIDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after PostTag is retrieved from the database
func (o *PostTag) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = PostTags.AfterSelectHooks.RunHooks(ctx, exec, PostTagSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = PostTags.AfterInsertHooks.RunHooks(ctx, exec, PostTagSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = PostTags.AfterUpdateHooks.RunHooks(ctx, exec, PostTagSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = PostTags.AfterDeleteHooks.RunHooks(ctx, exec, PostTagSlice{o})
	}

	return err
}

// PrimaryKeyVals returns the primary key values of the PostTag
func (o *PostTag) PrimaryKeyVals() bob.Expression {
	return psql.ArgGroup(
		o.PostID,
		o.TagID,
	)
}

func (o *PostTag) pkEQ() dialect.Expression {
	return psql.Group(psql.Quote("post_tags", "post_id"), psql.Quote("post_tags", "tag_id")).EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.PrimaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the PostTag
func (o *PostTag) Update(ctx context.Context, exec bob.Executor, s *PostTagSetter) error {
	v, err := PostTags.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single PostTag record with an executor
func (o *PostTag) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := PostTags.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the PostTag using the executor
func (o *PostTag) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := PostTags.Query(
		SelectWhere.PostTags.PostID.EQ(o.PostID),
		SelectWhere.PostTags.TagID.EQ(o.TagID),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after PostTagSlice is retrieved from the database
func (o PostTagSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = PostTags.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = PostTags.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = PostTags.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = PostTags.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o PostTagSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Group(psql.Quote("post_tags", "post_id"), psql.Quote("post_tags", "tag_id")).In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.PrimaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o PostTagSlice) copyMatchingRows(from ...*PostTag) {
	for i, old := range o {
		for _, new := range from {
			if new.PostID != old.PostID {
				continue
			}
			if new.TagID != old.TagID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o PostTagSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return PostTags.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *PostTag:
				o.copyMatchingRows(retrieved)
			case []*PostTag:
				o.copyMatchingRows(retrieved...)
			case PostTagSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a PostTag or a slice of PostTag
				// then run the AfterUpdateHooks on the slice
				_, err = PostTags.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o PostTagSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return PostTags.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *PostTag:
				o.copyMatchingRows(retrieved)
			case []*PostTag:
				o.copyMatchingRows(retrieved...)
			case PostTagSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a PostTag or a slice of PostTag
				// then run the AfterDeleteHooks on the slice
				_, err = PostTags.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o PostTagSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals PostTagSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := PostTags.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o PostTagSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := PostTags.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o PostTagSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := PostTags.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type postTagJoins[Q dialect.Joinable] struct {
	typ  string
	Post func(context.Context) modAs[Q, postColumns]
	Tag  func(context.Context) modAs[Q, tagColumns]
}

func (j postTagJoins[Q]) aliasedAs(alias string) postTagJoins[Q] {
	return buildPostTagJoins[Q](buildPostTagColumns(alias), j.typ)
}

func buildPostTagJoins[Q dialect.Joinable](cols postTagColumns, typ string) postTagJoins[Q] {
	return postTagJoins[Q]{
		typ:  typ,
		Post: postTagsJoinPost[Q](cols, typ),
		Tag:  postTagsJoinTag[Q](cols, typ),
	}
}

func postTagsJoinPost[Q dialect.Joinable](from postTagColumns, typ string) func(context.Context) modAs[Q, postColumns] {
	return func(ctx context.Context) modAs[Q, postColumns] {
		return modAs[Q, postColumns]{
			c: PostColumns,
			f: func(to postColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Posts.Name().As(to.Alias())).On(
						to.ID.EQ(from.PostID),
					))
				}

				return mods
			},
		}
	}
}

func postTagsJoinTag[Q dialect.Joinable](from postTagColumns, typ string) func(context.Context) modAs[Q, tagColumns] {
	return func(ctx context.Context) modAs[Q, tagColumns] {
		return modAs[Q, tagColumns]{
			c: TagColumns,
			f: func(to tagColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Tags.Name().As(to.Alias())).On(
						to.ID.EQ(from.TagID),
					))
				}

				return mods
			},
		}
	}
}

// Post starts a query for related objects on posts
func (o *PostTag) Post(mods ...bob.Mod[*dialect.SelectQuery]) PostsQuery {
	return Posts.Query(append(mods,
		sm.Where(PostColumns.ID.EQ(psql.Arg(o.PostID))),
	)...)
}

func (os PostTagSlice) Post(mods ...bob.Mod[*dialect.SelectQuery]) PostsQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.PostID)
	}

	return Posts.Query(append(mods,
		sm.Where(psql.Group(PostColumns.ID).In(PKArgs...)),
	)...)
}

// Tag starts a query for related objects on tags
func (o *PostTag) Tag(mods ...bob.Mod[*dialect.SelectQuery]) TagsQuery {
	return Tags.Query(append(mods,
		sm.Where(TagColumns.ID.EQ(psql.Arg(o.TagID))),
	)...)
}

func (os PostTagSlice) Tag(mods ...bob.Mod[*dialect.SelectQuery]) TagsQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = psql.ArgGroup(o.TagID)
	}

	return Tags.Query(append(mods,
		sm.Where(psql.Group(TagColumns.ID).In(PKArgs...)),
	)...)
}

func (o *PostTag) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "Post":
		rel, ok := retrieved.(*Post)
		if !ok {
			return fmt.Errorf("postTag cannot load %T as %q", retrieved, name)
		}

		o.R.Post = rel

		if rel != nil {
			rel.R.PostTags = PostTagSlice{o}
		}
		return nil
	case "Tag":
		rel, ok := retrieved.(*Tag)
		if !ok {
			return fmt.Errorf("postTag cannot load %T as %q", retrieved, name)
		}

		o.R.Tag = rel

		if rel != nil {
			rel.R.PostTags = PostTagSlice{o}
		}
		return nil
	default:
		return fmt.Errorf("postTag has no relationship %q", name)
	}
}

func PreloadPostTagPost(opts ...psql.PreloadOption) psql.Preloader {
	return psql.Preload[*Post, PostSlice](orm.Relationship{
		Name: "Post",
		Sides: []orm.RelSide{
			{
				From: TableNames.PostTags,
				To:   TableNames.Posts,
				FromColumns: []string{
					ColumnNames.PostTags.PostID,
				},
				ToColumns: []string{
					ColumnNames.Posts.ID,
				},
			},
		},
	}, Posts.Columns().Names(), opts...)
}

func ThenLoadPostTagPost(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadPostTagPost(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load PostTagPost", retrieved)
		}

		err := loader.LoadPostTagPost(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadPostTagPost loads the postTag's Post into the .R struct
func (o *PostTag) LoadPostTagPost(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Post = nil

	related, err := o.Post(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.PostTags = PostTagSlice{o}

	o.R.Post = related
	return nil
}

// LoadPostTagPost loads the postTag's Post into the .R struct
func (os PostTagSlice) LoadPostTagPost(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	posts, err := os.Post(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range posts {
			if o.PostID != rel.ID {
				continue
			}

			rel.R.PostTags = append(rel.R.PostTags, o)

			o.R.Post = rel
			break
		}
	}

	return nil
}

func PreloadPostTagTag(opts ...psql.PreloadOption) psql.Preloader {
	return psql.Preload[*Tag, TagSlice](orm.Relationship{
		Name: "Tag",
		Sides: []orm.RelSide{
			{
				From: TableNames.PostTags,
				To:   TableNames.Tags,
				FromColumns: []string{
					ColumnNames.PostTags.TagID,
				},
				ToColumns: []string{
					ColumnNames.Tags.ID,
				},
			},
		},
	}, Tags.Columns().Names(), opts...)
}

func ThenLoadPostTagTag(queryMods ...bob.Mod[*dialect.SelectQuery]) psql.Loader {
	return psql.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadPostTagTag(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load PostTagTag", retrieved)
		}

		err := loader.LoadPostTagTag(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadPostTagTag loads the postTag's Tag into the .R struct
func (o *PostTag) LoadPostTagTag(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Tag = nil

	related, err := o.Tag(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.PostTags = PostTagSlice{o}

	o.R.Tag = related
	return nil
}

// LoadPostTagTag loads the postTag's Tag into the .R struct
func (os PostTagSlice) LoadPostTagTag(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	tags, err := os.Tag(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range tags {
			if o.TagID != rel.ID {
				continue
			}

			rel.R.PostTags = append(rel.R.PostTags, o)

			o.R.Tag = rel
			break
		}
	}

	return nil
}

func attachPostTagPost0(ctx context.Context, exec bob.Executor, count int, postTag0 *PostTag, post1 *Post) (*PostTag, error) {
	setter := &PostTagSetter{
		PostID: omit.From(post1.ID),
	}

	err := postTag0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachPostTagPost0: %w", err)
	}

	return postTag0, nil
}

func (postTag0 *PostTag) InsertPost(ctx context.Context, exec bob.Executor, related *PostSetter) error {
	post1, err := Posts.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachPostTagPost0(ctx, exec, 1, postTag0, post1)
	if err != nil {
		return err
	}

	postTag0.R.Post = post1

	post1.R.PostTags = append(post1.R.PostTags, postTag0)

	return nil
}

func (postTag0 *PostTag) AttachPost(ctx context.Context, exec bob.Executor, post1 *Post) error {
	var err error

	_, err = attachPostTagPost0(ctx, exec, 1, postTag0, post1)
	if err != nil {
		return err
	}

	postTag0.R.Post = post1

	post1.R.PostTags = append(post1.R.PostTags, postTag0)

	return nil
}

func attachPostTagTag0(ctx context.Context, exec bob.Executor, count int, postTag0 *PostTag, tag1 *Tag) (*PostTag, error) {
	setter := &PostTagSetter{
		TagID: omit.From(tag1.ID),
	}

	err := postTag0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachPostTagTag0: %w", err)
	}

	return postTag0, nil
}

func (postTag0 *PostTag) InsertTag(ctx context.Context, exec bob.Executor, related *TagSetter) error {
	tag1, err := Tags.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachPostTagTag0(ctx, exec, 1, postTag0, tag1)
	if err != nil {
		return err
	}

	postTag0.R.Tag = tag1

	tag1.R.PostTags = append(tag1.R.PostTags, postTag0)

	return nil
}

func (postTag0 *PostTag) AttachTag(ctx context.Context, exec bob.Executor, tag1 *Tag) error {
	var err error

	_, err = attachPostTagTag0(ctx, exec, 1, postTag0, tag1)
	if err != nil {
		return err
	}

	postTag0.R.Tag = tag1

	tag1.R.PostTags = append(tag1.R.PostTags, postTag0)

	return nil
}

// UpsertByPK uses an executor to upsert the PostTag
func (o *PostTag) UpsertByPK(ctx context.Context, exec bob.Executor, s *PostTagSetter) error {
	columns := s.SetColumns()
	if len(columns) == 0 {
		return nil
	}

	conflictCols := []any{
		"post_id",

		"tag_id",
	}

	q := psql.Insert(
		im.Into("post_tags"),
		im.OnConflict(conflictCols...).
			DoUpdate(im.SetExcluded(columns...)),
		im.Returning("post_id", "tag_id", "created_at", "updated_at"),
	)

	q.Apply(s)
	ret, err := bob.One(ctx, exec, q, scan.StructMapper[PostTag]())
	if err != nil {
		return err
	}
	*o = ret

	return nil
}

// UpsertDoNothing uses an executor to upsert the PostTag
func (o *PostTag) UpsertDoNothing(ctx context.Context, exec bob.Executor, s *PostTagSetter) error {
	conflictCols := []any{
		"post_id",

		"tag_id",
	}

	q := psql.Insert(
		im.Into("post_tags"),
		im.Returning("post_id", "tag_id", "created_at", "updated_at"),
		im.OnConflict(conflictCols...).DoNothing(),
	)

	q.Apply(s)
	ret, err := bob.One(ctx, exec, q, scan.StructMapper[PostTag]())
	if err != nil {
		return err
	}
	*o = ret

	return nil
}
